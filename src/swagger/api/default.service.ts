/**
 * bsh-server
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams, HttpResponse, HttpEvent } from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';

import { Observable } from 'rxjs';

import { Annotation } from '../model/annotation';
import { AnnotationCreationRequest } from '../model/annotationCreationRequest';
import { Campaign } from '../model/campaign';
import { CreateUserRequest } from '../model/createUserRequest';
import { ImageData } from '../model/imageData';
import { Leaderboard } from '../model/leaderboard';
import { PredictionResult } from '../model/predictionResult';
import { User } from '../model/user';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';

@Injectable()
export class DefaultService {
  protected basePath = 'http://127.0.0.1:5000';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string,
    @Optional() configuration: Configuration
  ) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

  /**
   *
   *
   * @param request
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public createUser(request: CreateUserRequest, observe?: 'body', reportProgress?: boolean): Observable<User>;
  public createUser(
    request: CreateUserRequest,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<User>>;
  public createUser(
    request: CreateUserRequest,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<User>>;
  public createUser(
    request: CreateUserRequest,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (request === null || request === undefined) {
      throw new Error('Required parameter request was null or undefined when calling createUser.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<User>(`${this.basePath}/users`, request, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   *
   *
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getAllCampaigns(observe?: 'body', reportProgress?: boolean): Observable<Array<Campaign>>;
  public getAllCampaigns(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Campaign>>>;
  public getAllCampaigns(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Campaign>>>;
  public getAllCampaigns(observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];

    return this.httpClient.get<Array<Campaign>>(`${this.basePath}/campaigns`, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   *
   *
   * @param campaignId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getAllImages(campaignId: string, observe?: 'body', reportProgress?: boolean): Observable<Array<ImageData>>;
  public getAllImages(
    campaignId: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<Array<ImageData>>>;
  public getAllImages(
    campaignId: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<Array<ImageData>>>;
  public getAllImages(campaignId: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (campaignId === null || campaignId === undefined) {
      throw new Error('Required parameter campaignId was null or undefined when calling getAllImages.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];

    return this.httpClient.get<Array<ImageData>>(
      `${this.basePath}/campaigns/${encodeURIComponent(String(campaignId))}/images`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   *
   *
   * @param campaignId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getCampaign(campaignId: string, observe?: 'body', reportProgress?: boolean): Observable<Campaign>;
  public getCampaign(
    campaignId: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<Campaign>>;
  public getCampaign(campaignId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Campaign>>;
  public getCampaign(campaignId: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (campaignId === null || campaignId === undefined) {
      throw new Error('Required parameter campaignId was null or undefined when calling getCampaign.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];

    return this.httpClient.get<Campaign>(`${this.basePath}/campaigns/${encodeURIComponent(String(campaignId))}`, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   *
   *
   * @param campaignName
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getCampaignByURLName(campaignName: string, observe?: 'body', reportProgress?: boolean): Observable<Campaign>;
  public getCampaignByURLName(
    campaignName: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<Campaign>>;
  public getCampaignByURLName(
    campaignName: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<Campaign>>;
  public getCampaignByURLName(
    campaignName: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (campaignName === null || campaignName === undefined) {
      throw new Error('Required parameter campaignName was null or undefined when calling getCampaignByURLName.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];

    return this.httpClient.get<Campaign>(
      `${this.basePath}/campaigns/byURLName/${encodeURIComponent(String(campaignName))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   *
   *
   * @param campaignId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getLeaderboard(campaignId: string, observe?: 'body', reportProgress?: boolean): Observable<Leaderboard>;
  public getLeaderboard(
    campaignId: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<Leaderboard>>;
  public getLeaderboard(
    campaignId: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<Leaderboard>>;
  public getLeaderboard(campaignId: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (campaignId === null || campaignId === undefined) {
      throw new Error('Required parameter campaignId was null or undefined when calling getLeaderboard.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];

    return this.httpClient.get<Leaderboard>(
      `${this.basePath}/campaigns/${encodeURIComponent(String(campaignId))}/leaderboard`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   *
   *
   * @param campaignId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getRandomImage(campaignId: string, observe?: 'body', reportProgress?: boolean): Observable<ImageData>;
  public getRandomImage(
    campaignId: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<ImageData>>;
  public getRandomImage(
    campaignId: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<ImageData>>;
  public getRandomImage(campaignId: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (campaignId === null || campaignId === undefined) {
      throw new Error('Required parameter campaignId was null or undefined when calling getRandomImage.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];

    return this.httpClient.get<ImageData>(
      `${this.basePath}/campaigns/${encodeURIComponent(String(campaignId))}/images/random`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   *
   *
   * @param email
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getUserByEmail(email: string, observe?: 'body', reportProgress?: boolean): Observable<User>;
  public getUserByEmail(email: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<User>>;
  public getUserByEmail(email: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<User>>;
  public getUserByEmail(email: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (email === null || email === undefined) {
      throw new Error('Required parameter email was null or undefined when calling getUserByEmail.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];

    return this.httpClient.get<User>(`${this.basePath}/users/byEmail/${encodeURIComponent(String(email))}`, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   *
   *
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public initialize(observe?: 'body', reportProgress?: boolean): Observable<boolean>;
  public initialize(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
  public initialize(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
  public initialize(observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];

    return this.httpClient.get<boolean>(`${this.basePath}/campaigns/initialize`, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   *
   *
   * @param imageFile
   * @param userToken
   * @param campaignId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postImage(
    imageFile: Blob,
    userToken: string,
    campaignId: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<ImageData>;
  public postImage(
    imageFile: Blob,
    userToken: string,
    campaignId: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<ImageData>>;
  public postImage(
    imageFile: Blob,
    userToken: string,
    campaignId: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<ImageData>>;
  public postImage(
    imageFile: Blob,
    userToken: string,
    campaignId: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (imageFile === null || imageFile === undefined) {
      throw new Error('Required parameter imageFile was null or undefined when calling postImage.');
    }

    if (userToken === null || userToken === undefined) {
      throw new Error('Required parameter userToken was null or undefined when calling postImage.');
    }

    if (campaignId === null || campaignId === undefined) {
      throw new Error('Required parameter campaignId was null or undefined when calling postImage.');
    }

    let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
    if (userToken !== undefined && userToken !== null) {
      queryParameters = queryParameters.set('userToken', <any>userToken);
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['multipart/form-data'];

    const canConsumeForm = this.canConsumeForm(consumes);

    let formParams: { append(param: string, value: any): void };
    let useForm = false;
    let convertFormParamsToString = false;
    // use FormData to transmit files using content-type "multipart/form-data"
    // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
    useForm = canConsumeForm;
    if (useForm) {
      formParams = new FormData();
    } else {
      formParams = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
    }

    if (imageFile !== undefined) {
      formParams.append('imageFile', <any>imageFile);
    }

    return this.httpClient.post<ImageData>(
      `${this.basePath}/campaigns/${encodeURIComponent(String(campaignId))}/images`,
      convertFormParamsToString ? formParams.toString() : formParams,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   *
   *
   * @param campaignId
   * @param imageId
   * @param request
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postImageAnnotation(
    campaignId: string,
    imageId: string,
    request: AnnotationCreationRequest,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<Array<Annotation>>;
  public postImageAnnotation(
    campaignId: string,
    imageId: string,
    request: AnnotationCreationRequest,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<Array<Annotation>>>;
  public postImageAnnotation(
    campaignId: string,
    imageId: string,
    request: AnnotationCreationRequest,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<Array<Annotation>>>;
  public postImageAnnotation(
    campaignId: string,
    imageId: string,
    request: AnnotationCreationRequest,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (campaignId === null || campaignId === undefined) {
      throw new Error('Required parameter campaignId was null or undefined when calling postImageAnnotation.');
    }

    if (imageId === null || imageId === undefined) {
      throw new Error('Required parameter imageId was null or undefined when calling postImageAnnotation.');
    }

    if (request === null || request === undefined) {
      throw new Error('Required parameter request was null or undefined when calling postImageAnnotation.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<Array<Annotation>>(
      `${this.basePath}/campaigns/${encodeURIComponent(String(campaignId))}/images/${encodeURIComponent(
        String(imageId)
      )}/annotations`,
      request,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   *
   *
   * @param campaignId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public requestPrediction(
    campaignId: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<PredictionResult>;
  public requestPrediction(
    campaignId: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<PredictionResult>>;
  public requestPrediction(
    campaignId: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<PredictionResult>>;
  public requestPrediction(
    campaignId: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (campaignId === null || campaignId === undefined) {
      throw new Error('Required parameter campaignId was null or undefined when calling requestPrediction.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];

    return this.httpClient.post<PredictionResult>(
      `${this.basePath}/campaigns/${encodeURIComponent(String(campaignId))}/predictions`,
      null,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }
}
